-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hart is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inst : IN STD_LOGIC_VECTOR (31 downto 0);
    pc : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of hart is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hart_hart,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx550t-ffg1927-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.659444,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=194,HLS_SYN_LUT=1678,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";
    constant ap_const_lv7_37 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_const_lv7_17 : STD_LOGIC_VECTOR (6 downto 0) := "0010111";
    constant ap_const_lv7_6F : STD_LOGIC_VECTOR (6 downto 0) := "1101111";
    constant ap_const_lv7_67 : STD_LOGIC_VECTOR (6 downto 0) := "1100111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rf_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rf_ce0 : STD_LOGIC;
    signal rf_we0 : STD_LOGIC;
    signal rf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rf_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rf_ce1 : STD_LOGIC;
    signal rf_we1 : STD_LOGIC;
    signal rf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rf_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal opcode_fu_227_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal opcode_reg_388 : STD_LOGIC_VECTOR (6 downto 0);
    signal rd_fu_231_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal rd_reg_393 : STD_LOGIC_VECTOR (4 downto 0);
    signal func3_fu_261_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal func3_reg_398 : STD_LOGIC_VECTOR (2 downto 0);
    signal func7_reg_403 : STD_LOGIC_VECTOR (6 downto 0);
    signal rf_load_reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal rf_load_1_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_OP_AL_32I_fu_211_ap_start : STD_LOGIC;
    signal grp_OP_AL_32I_fu_211_ap_done : STD_LOGIC;
    signal grp_OP_AL_32I_fu_211_ap_idle : STD_LOGIC;
    signal grp_OP_AL_32I_fu_211_ap_ready : STD_LOGIC;
    signal grp_OP_AL_32I_fu_211_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_OP_AL_32I_fu_211_ap_return_1 : STD_LOGIC_VECTOR (0 downto 0);
    signal status_1_reg_169 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op61_call_state4 : BOOLEAN;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal icmp_ln41_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_OP_AL_32I_fu_211_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln46_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_1_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_2_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln39_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_329_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal imm_31_12_fu_281_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln29_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln39_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rs1_fu_241_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal rs2_fu_251_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal next_pc_fu_366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_371_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_condition_203 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component hart_OP_AL_32I IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        opcode_val : IN STD_LOGIC_VECTOR (6 downto 0);
        func7_val : IN STD_LOGIC_VECTOR (6 downto 0);
        func3_val : IN STD_LOGIC_VECTOR (2 downto 0);
        op1_val : IN STD_LOGIC_VECTOR (31 downto 0);
        op2_val : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hart_rf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    rf_U : component hart_rf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rf_address0,
        ce0 => rf_ce0,
        we0 => rf_we0,
        d0 => rf_d0,
        q0 => rf_q0,
        address1 => rf_address1,
        ce1 => rf_ce1,
        we1 => rf_we1,
        d1 => rf_d1,
        q1 => rf_q1);

    grp_OP_AL_32I_fu_211 : component hart_OP_AL_32I
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_OP_AL_32I_fu_211_ap_start,
        ap_done => grp_OP_AL_32I_fu_211_ap_done,
        ap_idle => grp_OP_AL_32I_fu_211_ap_idle,
        ap_ready => grp_OP_AL_32I_fu_211_ap_ready,
        opcode_val => opcode_reg_388,
        func7_val => func7_reg_403,
        func3_val => func3_reg_398,
        op1_val => rf_load_reg_421,
        op2_val => rf_load_1_reg_426,
        ap_return_0 => grp_OP_AL_32I_fu_211_ap_return_0,
        ap_return_1 => grp_OP_AL_32I_fu_211_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_OP_AL_32I_fu_211_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_OP_AL_32I_fu_211_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_OP_AL_32I_fu_211_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_OP_AL_32I_fu_211_ap_ready = ap_const_logic_1)) then 
                    grp_OP_AL_32I_fu_211_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    status_1_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((func3_fu_261_p4 = ap_const_lv3_6)) and not((func3_fu_261_p4 = ap_const_lv3_5)) and not((func3_fu_261_p4 = ap_const_lv3_4)) and not((func3_fu_261_p4 = ap_const_lv3_1)) and not((func3_fu_261_p4 = ap_const_lv3_0)) and (opcode_fu_227_p1 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((opcode_fu_227_p1 = ap_const_lv7_67) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln41_fu_295_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1)))) then 
                status_1_reg_169 <= ap_const_lv1_1;
            elsif ((((func3_fu_261_p4 = ap_const_lv3_6) and (opcode_fu_227_p1 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((func3_fu_261_p4 = ap_const_lv3_5) and (opcode_fu_227_p1 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((func3_fu_261_p4 = ap_const_lv3_4) and (opcode_fu_227_p1 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((func3_fu_261_p4 = ap_const_lv3_1) and (opcode_fu_227_p1 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((func3_fu_261_p4 = ap_const_lv3_0) and (opcode_fu_227_p1 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((opcode_fu_227_p1 = ap_const_lv7_67) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln41_fu_295_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1)) or ((opcode_fu_227_p1 = ap_const_lv7_37) and (ap_const_logic_1 = ap_CS_fsm_state1) 
    and (ap_start = ap_const_logic_1)) or ((opcode_fu_227_p1 = ap_const_lv7_17) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((opcode_fu_227_p1 = ap_const_lv7_6F) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                status_1_reg_169 <= ap_const_lv1_0;
            elsif ((not((opcode_reg_388 = ap_const_lv7_6F)) and not((opcode_reg_388 = ap_const_lv7_17)) and not((opcode_reg_388 = ap_const_lv7_37)) and not((opcode_reg_388 = ap_const_lv7_63)) and not((opcode_reg_388 = ap_const_lv7_67)) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                status_1_reg_169 <= grp_OP_AL_32I_fu_211_ap_return_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                func3_reg_398 <= inst(14 downto 12);
                func7_reg_403 <= inst(31 downto 25);
                opcode_reg_388 <= opcode_fu_227_p1;
                rd_reg_393 <= inst(11 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                rf_load_1_reg_426 <= rf_q0;
                rf_load_reg_421 <= rf_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, opcode_fu_227_p1, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and ((opcode_fu_227_p1 = ap_const_lv7_63) or ((opcode_fu_227_p1 = ap_const_lv7_37) or ((opcode_fu_227_p1 = ap_const_lv7_17) or ((opcode_fu_227_p1 = ap_const_lv7_6F) or (opcode_fu_227_p1 = ap_const_lv7_67))))))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not((opcode_fu_227_p1 = ap_const_lv7_63)) and not((opcode_fu_227_p1 = ap_const_lv7_67)) and not((opcode_fu_227_p1 = ap_const_lv7_37)) and not((opcode_fu_227_p1 = ap_const_lv7_17)) and not((opcode_fu_227_p1 = ap_const_lv7_6F)) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln39_fu_311_p2 <= std_logic_vector(unsigned(pc) + unsigned(ap_const_lv32_C));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_block_state4_on_subcall_done_assign_proc : process(grp_OP_AL_32I_fu_211_ap_done, ap_predicate_op61_call_state4)
    begin
                ap_block_state4_on_subcall_done <= ((grp_OP_AL_32I_fu_211_ap_done = ap_const_logic_0) and (ap_predicate_op61_call_state4 = ap_const_boolean_1));
    end process;


    ap_condition_203_assign_proc : process(opcode_fu_227_p1)
    begin
                ap_condition_203 <= (not((opcode_fu_227_p1 = ap_const_lv7_63)) and not((opcode_fu_227_p1 = ap_const_lv7_67)) and not((opcode_fu_227_p1 = ap_const_lv7_37)) and not((opcode_fu_227_p1 = ap_const_lv7_17)) and not((opcode_fu_227_p1 = ap_const_lv7_6F)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op61_call_state4_assign_proc : process(opcode_reg_388)
    begin
                ap_predicate_op61_call_state4 <= (not((opcode_reg_388 = ap_const_lv7_6F)) and not((opcode_reg_388 = ap_const_lv7_17)) and not((opcode_reg_388 = ap_const_lv7_37)) and not((opcode_reg_388 = ap_const_lv7_63)) and not((opcode_reg_388 = ap_const_lv7_67)));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_371_p3),64));
    func3_fu_261_p4 <= inst(14 downto 12);
    grp_OP_AL_32I_fu_211_ap_start <= grp_OP_AL_32I_fu_211_ap_start_reg;
    grp_fu_220_p2 <= std_logic_vector(unsigned(pc) + unsigned(ap_const_lv32_4));
    icmp_ln41_fu_295_p2 <= "1" when (func3_fu_261_p4 = ap_const_lv3_0) else "0";
    imm_31_12_fu_281_p4 <= inst(31 downto 12);
    next_pc_fu_366_p2 <= std_logic_vector(unsigned(pc) + unsigned(ap_const_lv32_4));
    opcode_fu_227_p1 <= inst(7 - 1 downto 0);
    rd_fu_231_p4 <= inst(11 downto 7);

    rf_address0_assign_proc : process(ap_CS_fsm_state1, opcode_fu_227_p1, icmp_ln41_fu_295_p2, zext_ln46_fu_301_p1, zext_ln40_fu_306_p1, zext_ln39_fu_324_p1, zext_ln38_fu_338_p1, zext_ln49_1_fu_348_p1, ap_condition_203)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_boolean_1 = ap_condition_203)) then 
                rf_address0 <= zext_ln49_1_fu_348_p1(5 - 1 downto 0);
            elsif ((opcode_fu_227_p1 = ap_const_lv7_37)) then 
                rf_address0 <= zext_ln38_fu_338_p1(5 - 1 downto 0);
            elsif ((opcode_fu_227_p1 = ap_const_lv7_17)) then 
                rf_address0 <= zext_ln39_fu_324_p1(5 - 1 downto 0);
            elsif ((opcode_fu_227_p1 = ap_const_lv7_6F)) then 
                rf_address0 <= zext_ln40_fu_306_p1(5 - 1 downto 0);
            elsif (((opcode_fu_227_p1 = ap_const_lv7_67) and (icmp_ln41_fu_295_p2 = ap_const_lv1_1))) then 
                rf_address0 <= zext_ln46_fu_301_p1(5 - 1 downto 0);
            else 
                rf_address0 <= "XXXXX";
            end if;
        else 
            rf_address0 <= "XXXXX";
        end if; 
    end process;


    rf_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, zext_ln49_fu_343_p1, zext_ln49_2_fu_362_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rf_address1 <= ap_const_lv5_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rf_address1 <= zext_ln49_2_fu_362_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            rf_address1 <= zext_ln49_fu_343_p1(5 - 1 downto 0);
        else 
            rf_address1 <= "XXXXX";
        end if; 
    end process;


    rf_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, opcode_fu_227_p1, icmp_ln41_fu_295_p2)
    begin
        if (((not((opcode_fu_227_p1 = ap_const_lv7_63)) and not((opcode_fu_227_p1 = ap_const_lv7_67)) and not((opcode_fu_227_p1 = ap_const_lv7_37)) and not((opcode_fu_227_p1 = ap_const_lv7_17)) and not((opcode_fu_227_p1 = ap_const_lv7_6F)) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((opcode_fu_227_p1 = ap_const_lv7_67) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln41_fu_295_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1)) or ((opcode_fu_227_p1 = ap_const_lv7_37) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((opcode_fu_227_p1 = ap_const_lv7_17) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((opcode_fu_227_p1 = ap_const_lv7_6F) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            rf_ce0 <= ap_const_logic_1;
        else 
            rf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rf_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            rf_ce1 <= ap_const_logic_1;
        else 
            rf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rf_d0_assign_proc : process(ap_CS_fsm_state1, opcode_fu_227_p1, icmp_ln41_fu_295_p2, grp_fu_220_p2, shl_ln39_fu_317_p2, shl_ln_fu_329_p3)
    begin
        if (((opcode_fu_227_p1 = ap_const_lv7_37) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rf_d0 <= shl_ln_fu_329_p3;
        elsif (((opcode_fu_227_p1 = ap_const_lv7_17) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rf_d0 <= shl_ln39_fu_317_p2;
        elsif ((((opcode_fu_227_p1 = ap_const_lv7_67) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln41_fu_295_p2 = ap_const_lv1_1)) or ((opcode_fu_227_p1 = ap_const_lv7_6F) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            rf_d0 <= grp_fu_220_p2;
        else 
            rf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rf_d1_assign_proc : process(ap_CS_fsm_state4, grp_OP_AL_32I_fu_211_ap_return_0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rf_d1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rf_d1 <= grp_OP_AL_32I_fu_211_ap_return_0;
        else 
            rf_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rf_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, opcode_fu_227_p1, icmp_ln41_fu_295_p2)
    begin
        if ((((opcode_fu_227_p1 = ap_const_lv7_67) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln41_fu_295_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1)) or ((opcode_fu_227_p1 = ap_const_lv7_37) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((opcode_fu_227_p1 = ap_const_lv7_17) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((opcode_fu_227_p1 = ap_const_lv7_6F) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            rf_we0 <= ap_const_logic_1;
        else 
            rf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rf_we1_assign_proc : process(opcode_reg_388, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (not((opcode_reg_388 = ap_const_lv7_6F)) and not((opcode_reg_388 = ap_const_lv7_17)) and not((opcode_reg_388 = ap_const_lv7_37)) and not((opcode_reg_388 = ap_const_lv7_63)) and not((opcode_reg_388 = ap_const_lv7_67)) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done)))) then 
            rf_we1 <= ap_const_logic_1;
        else 
            rf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    rs1_fu_241_p4 <= inst(19 downto 15);
    rs2_fu_251_p4 <= inst(24 downto 20);
        sext_ln29_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(imm_31_12_fu_281_p4),32));

    shl_ln39_fu_317_p2 <= std_logic_vector(shift_left(unsigned(sext_ln29_fu_291_p1),to_integer(unsigned('0' & add_ln39_fu_311_p2(31-1 downto 0)))));
    shl_ln_fu_329_p3 <= (imm_31_12_fu_281_p4 & ap_const_lv12_0);
    tmp_1_fu_371_p3 <= (status_1_reg_169 & next_pc_fu_366_p2);
    zext_ln38_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_fu_231_p4),64));
    zext_ln39_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_fu_231_p4),64));
    zext_ln40_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_fu_231_p4),64));
    zext_ln46_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_fu_231_p4),64));
    zext_ln49_1_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs2_fu_251_p4),64));
    zext_ln49_2_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_reg_393),64));
    zext_ln49_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs1_fu_241_p4),64));
end behav;
